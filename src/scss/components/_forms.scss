// stylelint-disable selector-no-qualifying-type

//
// Textual form controls
//
.formControl {
  display: block;
  width: 100%;
  //max-width: var(--input-width);
  height: var(--input-height);
  padding: var(--input-padding-y) var(--input-padding-x);
  font-family: var(--input-font-family);
  @include font-size(var(--input-font-size));
  font-weight: var(--input-font-weight);
  line-height: var(--input-line-height);
  color: var(--input-color);
  background-color: var(--input-bg);
  background-clip: padding-box;
  border: var(--input-border-width) solid var(--input-border-color);
  border-radius: var(--input-border-radius);
  box-shadow: var(--input-box-shadow);
  transition: var(--input-transition);

  // Remove select outline from select box in FF
  &:-moz-focusring {
    color: transparent;
    text-shadow: 0 0 0 var(--input-color);
  }

  // Customize the `:focus` state to imitate native WebKit styles.
  //@include formControl-focus;

  // Placeholder
  &::placeholder {
    color: var(--input-placeholder-color);
    // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526.
    opacity: 1;
  }

  // Disabled and read-only inputs
  &:disabled,
  &[readonly] {
    background-color: var(--input-disabled-bg);
    // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655.
    opacity: 1;
  }

  &--curved {
    border-radius: var(--input-border-radius-sm);
  }

  &--rounded {
    border-radius: var(--input-border-radius-lg);
  }

  &--textOnly {
    border-radius: var(--input-border-radius);
    border-width: 0 0 1px 0;
  }

  &--bg {
    border-color: transparent;
    background-color: var(--gray-light);
  }

  ~ .searchInputBtn {
    position: absolute;
    left: calc(100% - 25px);
    width: 14px;
    top: 0;
    font-size: 13px;
    z-index: 20;
    cursor: pointer;
    text-decoration: none;
    color: var(--gray-dark);
    background-color: transparent;
    padding: 0;
    border: none;
    display: flex;
    align-items: center;
    height: var(--input-height);
  }

  //&.searchClear {
  //~ .searchInputBtn {
  //  left: 8px;
  //}
  //}

  ~ .successOption {
    position: absolute;
    left: calc(100% + 10px);
    width: 20px;
    top: 10px;
    font-size: 18px;
    color: var(--success);
    display: none;
  }

  ~ .errorOptionx {
    position: absolute;
    left: calc(100% + 10px);
    width: 20px;
    top: 10px;
    font-size: 18px;
    color: var(--danger);
    display: none;
  }

  &.success {
    //border: var(--input-border-width) solid var(--input-border-color-success);
    ~ .successOption {
      display: block;
    }
  }

  ~ .text-danger {
    display: none;
    font-size: 10px;
    line-height: 1;
    padding-top: 3px;
    margin: 0;
    color: var(--danger);
  }

  &.error {
    border-color: var(--input-border-color-error);

    ~ .errorOptionx {
      display: block;
    }

    ~ .text-danger {
      display: block;
    }
  }
}

input[type='search'] {
  &::-webkit-search-cancel-button {
    position: absolute;
    left: calc(100% - 22px);
    width: 10px;
    font-size: 15px;
    color: var(--gray-dark);
    padding: 1px;
    border: none;
    height: var(--input-height);
    display: flex;
    align-items: center;
    justify-content: center;
    font-family: 'design-system-icons' !important;
    cursor: pointer;
    margin: 0;
    &:before {
      content: 'x';
    }
  }

  ~ .searchInputBtn {
    left: 8px;
  }
}

.formControlHolder {
  position: relative;
  //max-width: var(--input-width);
  height: auto;

  .formControl--textOnly {
    padding-right: var(--input-padding-x-sm);
  }

  .formControl {
    padding: var(--input-padding-y) calc(var(--input-padding-x) * 2)
      var(--input-padding-y) var(--input-padding-x);
  }

  .searchClear {
    padding: var(--input-padding-y) 2rem;
  }

  .calenderBtn {
    position: absolute;
    width: 10px;
    top: 0;
    font-size: 10px;
    z-index: 20;
    cursor: pointer;
    text-decoration: none;
    color: var(--gray-dark);
    background-color: transparent;
    padding: 0;
    border: none;
    height: var(--input-height);
    align-items: center;
    display: none;
  }

  .clearCrossBtn {
    display: none;
  }

  &__select {
    position: relative;

    select {
      -moz-appearance: none;
      -webkit-appearance: none;
    }

    &:after {
      position: absolute;
      content: '\e93f';
      right: 8px;
      top: 0;
      font-family: 'design-system-icons' !important;
      font-size: 8px;
      pointer-events: none;
      color: var(--gray-dark);
      display: flex;
      align-items: center;
      line-height: 1;
      height: var(--input-height);
      cursor: pointer;
    }

    .searchClear {
      &.formControl {
        padding: var(--input-padding-y) calc(var(--input-padding-x) * 3.5)
          var(--input-padding-y) var(--input-padding-x);
      }
      ~ .clearCrossBtn {
        display: flex;
      }
    }

    .clearCrossBtn {
      position: absolute;
      left: calc(100% - 40px) !important;
      width: 10px;
      top: 0;
      font-size: 10px;
      z-index: 20;
      cursor: pointer;
      text-decoration: none;
      color: var(--gray-dark);
      background-color: transparent;
      padding: 0;
      border: none;
      height: var(--input-height);
      align-items: center;
      justify-content: center;
    }

    //if input takes .formControlHolder__calendar class following code will run todo
    .formControl__calendar {
      &.formControl {
        padding: var(--input-padding-y) calc(var(--input-padding-x) * 1.8)
          var(--input-padding-y);
      }

      ~ .calenderBtn {
        left: 8px;
        display: flex;
        width: 13px;
        font-size: 13px;
      }
    }
  }
}

fieldset {
  padding: 0;
  border: none;

  legend {
    display: inline-block;
    margin-bottom: 0.5rem;
    font-weight: var(--font-weight-bold);
    font-size: var(--font-size-base);
    line-height: 1;
    color: var(--gray-dark);
  }

  .formCheck {
    padding: 0;
    margin-bottom: 0.5rem;
  }
}

label {
  display: inline-block;
  margin-bottom: 0.5rem;
  font-weight: var(--font-weight-bold);
  font-size: var(--font-size-base);
  line-height: 1;
  color: var(--gray-dark);
}

input[type='date'],
input[type='time'],
input[type='datetime-local'],
input[type='month'] {
  &.formControl {
    appearance: none; // Fix appearance for date inputs in Safari
  }
}

select.formControl {
  &:focus::-ms-value {
    // Suppress the nested default white text on blue background highlight given to
    // the selected option text when the (still closed) <select> receives focus
    // in IE and (under certain conditions) Edge, as  it looks bad and cannot be made to
    // match the appearance of the native widget.
    // See https://github.com/twbs/bootstrap/issues/19398.
    color: var(--input-color);
    background-color: var(--input-bg);
  }
}

// Make file inputs better match text inputs by forcing them to new lines.
.formControl-file,
.formControl-range {
  display: block;
  width: 100%;
}

//
// Labels
//

// For use with horizontal and inline forms, when you need the label (or legend)
// text to align with the form controls.
.col-form-label {
  padding-top: add(var(--input-padding-y), var(--input-border-width));
  padding-bottom: add(var(--input-padding-y), var(--input-border-width));
  margin-bottom: 0; // Override the `<label>/<legend>` default
  @include font-size(inherit); // Override the `<legend>` default
  line-height: var(--input-line-height);
}

.col-form-label-lg {
  padding-top: add(var(--input-padding-y) -lg, var(--input-border-width));
  padding-bottom: add(var(--input-padding-y) -lg, var(--input-border-width));
  @include font-size(var(--input-font-size-lg));
  line-height: var(--input-line-height-lg);
}

.col-form-label-sm {
  padding-top: add(var(--input-padding-y) -sm, var(--input-border-width));
  padding-bottom: add(var(--input-padding-y) -sm, var(--input-border-width));
  @include font-size(var(--input-font-size-sm));
  line-height: var(--input-line-height-sm);
}

// Readonly controls as plain text
//
// Apply class to a readonly input to make it appear like regular plain
// text (without any border, background color, focus indicator)

.formControl-plaintext {
  display: block;
  width: 100%;
  padding: var(--input-padding-y) 0;
  margin-bottom: 0; // match inputs if this class comes on inputs with default margins
  @include font-size(var(--input-font-size));
  line-height: var(--input-line-height);
  color: var(--input-plaintext-color);
  background-color: transparent;
  border: solid transparent;
  border-width: var(--input-border-width) 0;

  &.formControl-sm,
  &.formControl-lg {
    padding-right: 0;
    padding-left: 0;
  }
}

// Form control sizing
//
// Build on `.formControl` with modifier classes to decrease or increase the
// height and font-size of form controls.
//
// Repeated in `_input_group.scss` to avoid Sass extend issues.

.formControl-sm {
  height: var(--input-height-sm);
  padding: var(--input-padding-y-sm) var(--input-padding-x-sm);
  @include font-size(var(--input-font-size-sm));
  line-height: var(--input-line-height-sm);
  @include border-radius(var(--input-border-radius-sm));
}

.formControl-lg {
  height: var(--input-height-lg);
  padding: var(--input-padding-y-lg) var(--input-padding-x-lg);
  @include font-size(var(--input-font-size-lg));
  line-height: var(--input-line-height-lg);
  @include border-radius(var(--input-border-radius-lg));
}

// stylelint-disable-next-line no-duplicate-selectors
select.formControl {
  &[size],
  &[multiple] {
    height: auto;
  }
}

textarea.formControl {
  height: auto;
}

// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.

.formGroup {
  margin-bottom: var(--formGroup-margin-bottom);
}

.form-text {
  display: block;
  margin-top: var(--form-text-margin-top);
}

// Form grid
//
// Special replacement for our grid system's `.row` for tighter form layouts.

.form-row {
  display: flex;
  flex-wrap: wrap;
  margin-right: calc(var(--form-grid-gutter-width) / 2 * -1);
  margin-left: calc(var(--form-grid-gutter-width) / 2 * -1);
  align-items: flex-end;

  > .col,
  > [class*='col-'] {
    padding-right: calc(var(--form-grid-gutter-width) / 2);
    padding-left: calc(var(--form-grid-gutter-width) / 2);
  }
}

// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.

/* Create a custom checkbox */
.formCheck {
  position: relative;
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: flex-start;
  background-color: transparent;
  padding: 0 1rem;
  /* Styling Checkbox Starts */
  .checkLabel {
    color: var(--gray-dark);
    margin: 0 0 0 0.5rem;
    cursor: pointer;
  }

  .checkBox {
    display: inline-flex;
    align-items: center;
    justify-content: flex-start;
    position: relative;
    cursor: pointer;
    font-size: var(--font-size-base);
    line-height: var(--line-height-base);
    width: auto;
    min-height: 30px;

    input {
      position: relative;
      z-index: 10;
      opacity: 0;
      margin: 0;
      cursor: pointer;
      width: 30px;
      height: 30px;

      &:hover {
        ~ .checkboxFake {
          border: 2px solid var(--gray);
        }
      }

      &:focus {
        ~ .checkboxFake {
          outline: inherit;
          box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.5);
        }
      }

      &:checked ~ .checkboxFake {
        background-color: #ffffff;
        -webkit-transform: rotate(0deg) scale(1);
        -ms-transform: rotate(0deg) scale(1);
        transform: rotate(0deg) scale(1);
        opacity: 1;
        border: 2px solid var(--gray-dark);
        border-radius: var(--border-radius-none);

        &:after {
          -webkit-transform: rotate(45deg) scale(1);
          -ms-transform: rotate(45deg) scale(1);
          transform: rotate(45deg) scale(1);
          opacity: 1;
          left: 9px;
          top: 4px;
          width: 6px;
          height: 12px;
          border: solid var(--gray-dark);
          border-width: 0 3px 3px 0;
          background-color: transparent;
          border-radius: 0;
        }
      }
    }

    .checkboxFake {
      color: var(--gray-dark);
      position: absolute;
      top: 0;
      left: 0;
      z-index: 5;
      height: 30px;
      width: 30px;
      background-color: transparent;
      transition: all 0.3s ease-out;
      -webkit-transition: all 0.2s ease-out;
      -moz-transition: all 0.2s ease-out;
      -o-transition: all 0.2s ease-out;
      border: 2px solid var(--gray-dark);
      border-radius: var(--border-radius-none);

      &:after {
        position: absolute;
        content: '';
        left: 12px;
        top: 12px;
        height: 0;
        width: 0;
        border-radius: 5px;
        border: solid #009bff;
        border-width: 0 3px 3px 0;
        -webkit-transform: rotate(0deg) scale(0);
        -ms-transform: rotate(0deg) scale(0);
        transform: rotate(0deg) scale(0);
        opacity: 1;
        transition: all 0.3s ease-out;
        -webkit-transition: all 0.3s ease-out;
        -moz-transition: all 0.3s ease-out;
        -o-transition: all 0.3s ease-out;
      }
    }

    &--curved {
      input {
        &:checked ~ .checkboxFake {
          border-radius: var(--border-radius-lg);
        }
      }

      .checkboxFake {
        border-radius: var(--border-radius-lg);
      }
    }

    &--rounded {
      input {
        &:checked ~ .checkboxFake {
          border-radius: 50%;
        }
      }

      .checkboxFake {
        border-radius: 50%;
      }
    }

    &__bg {
      input {
        &:checked ~ .checkboxFake {
          background-color: currentColor;

          &:after {
            border: solid var(--gray-lighter);
            border-width: 0 3px 3px 0;
          }
        }

        &:hover {
          ~ .checkboxFake {
            border: 2px solid var(--gray);
            background-color: var(--gray);
          }
        }
      }

      .checkboxFake {
        background-color: currentColor;
      }

      ///if error class comes with bg
    }
  }

  &__error {
    .checkBox {
      input {
        &:checked ~ .checkboxFake {
          border-color: var(--danger);

          &:after {
            border: solid var(--danger);
            border-width: 0 3px 3px 0;
          }
        }

        &:hover {
          ~ .checkboxFake {
            border: 2px solid var(--danger);
          }
        }
      }

      .checkboxFake {
        border-color: var(--danger);
      }

      &.checkBox__bg {
        input {
          &:checked ~ .checkboxFake {
            border-color: var(--danger);
            background-color: var(--danger);

            &:after {
              border: solid var(--gray-lighter);
              border-width: 0 3px 3px 0;
            }
          }

          &:hover {
            ~ .checkboxFake {
              border: 2px solid var(--danger);
              background-color: var(--danger);
            }
          }
        }

        .checkboxFake {
          border-color: var(--danger);
          background-color: var(--danger);
        }
      }
    }
  }

  &.disabled {
    cursor: default;
    pointer-events: none;

    input {
      pointer-events: none;

      &:checked ~ .checkboxFake {
        border-color: var(--gray) !important;
        background-color: var(--gray);

        &:after {
          border: solid var(--gray-lighter);
          border-width: 0 3px 3px 0;
        }
      }

      &:hover {
        ~ .checkboxFake {
          border: 2px solid var(--gray);
          background-color: var(--gray);
        }
      }
    }

    ~ .checkboxFake {
      border-color: var(--gray) !important;
      background-color: var(--gray);
    }

    .checkLabel {
      cursor: default;
      pointer-events: none;
      color: var(--gray);
    }
  }
}

//Radio
.formRadio {
  position: relative;
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: flex-start;
  background-color: transparent;
  padding: 0;
  margin-bottom: 0.5rem;
  /* Styling Checkbox Starts */
  .radioLabel {
    color: var(--gray-dark);
    margin: 0 0 0 0.5rem;
    cursor: pointer;
  }

  .radioBtn {
    display: inline-flex;
    align-items: center;
    justify-content: flex-start;
    position: relative;
    cursor: pointer;
    font-size: var(--font-size-base);
    line-height: var(--line-height-base);
    width: var(--form-radio-width);
    min-height: var(--form-radio-height);

    input {
      position: relative;
      z-index: 10;
      opacity: 0;
      margin: 0;
      cursor: pointer;
      width: var(--form-radio-width);
      min-height: var(--form-radio-height);

      &:hover {
        ~ .radioBtnFake {
          border: 2px solid var(--gray);
          &:after {
            background-color: var(--gray);
          }
        }
      }

      &:focus {
        ~ .radioBtnFake {
          outline: inherit;
          box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.5);
        }
      }

      &:checked ~ .radioBtnFake {
        background-color: #ffffff;
        -webkit-transform: rotate(0deg) scale(1);
        -ms-transform: rotate(0deg) scale(1);
        transform: rotate(0deg) scale(1);
        opacity: 1;
        border: 2px solid var(--gray-dark);
        border-radius: var(--border-radius-none);

        &:after {
          -webkit-transform: scale(1);
          -ms-transform: scale(1);
          transform: scale(1);
          opacity: 1;
          width: 20px;
          height: 20px;
        }
      }
    }

    .radioBtnFake {
      color: var(--gray-dark);
      position: absolute;
      top: 0;
      left: 0;
      z-index: 5;
      height: 30px;
      width: 30px;
      background-color: transparent;
      transition: all 0.3s ease-out;
      -webkit-transition: all 0.2s ease-out;
      -moz-transition: all 0.2s ease-out;
      -o-transition: all 0.2s ease-out;
      border: 2px solid var(--gray-dark);
      border-radius: var(--border-radius-none);
      display: flex;
      align-items: center;
      justify-content: center;

      &:after {
        content: '';
        width: 0;
        height: 0;
        opacity: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: currentColor;
        -webkit-transform: rotate(0deg) scale(0);
        -ms-transform: rotate(0deg) scale(0);
        transform: rotate(0deg) scale(0);
        transition: all 0.3s ease-out;
        -webkit-transition: all 0.3s ease-out;
        -moz-transition: all 0.3s ease-out;
        -o-transition: all 0.3s ease-out;
      }
    }

    &--rounded {
      input {
        &:checked ~ .radioBtnFake {
          border-radius: 50%;
          &:after {
            width: 14px;
            height: 14px;
          }
        }
      }

      .radioBtnFake {
        border-radius: 50%;
        &:after {
          border-radius: 50%;
        }
      }
    }
  }

  &__error {
    .radioBtn {
      input {
        &:checked ~ .radioBtnFake {
          border-color: var(--danger);

          &:after {
            background-color: var(--danger);
          }
        }

        &:hover {
          ~ .radioBtnFake {
            border-color: var(--danger);
          }
        }

        &:focus {
          ~ .radioBtnFake {
            box-shadow: 0 0 0 0.2rem rgba(var(--danger), 0.5);
          }
        }
      }

      .radioBtnFake {
        border-color: var(--danger);
      }
    }
  }

  &.disabled {
    cursor: default;
    pointer-events: none;

    input {
      pointer-events: none;

      &:checked ~ .radioBtnFake {
        border-color: var(--gray) !important;
        background-color: var(--gray);

        &:after {
          border: solid var(--gray-lighter);
          border-width: 0 3px 3px 0;
        }
      }

      &:hover {
        ~ .radioBtnFake {
          border: 2px solid var(--gray);
          background-color: var(--gray);
        }
      }
    }

    ~ .checkboxFake {
      border-color: var(--gray) !important;
      background-color: var(--gray);
    }

    .radioLabel {
      cursor: default;
      pointer-events: none;
      color: var(--gray);
    }
  }
}

.form-check-inline {
  display: inline-flex;
  align-items: center;
  padding-left: 0; // Override base .form-check
  margin-right: var(--form-check-inline-margin-x);

  // Undo .form-check-input defaults and add some `margin-right`.
  .form-check-input {
    position: static;
    margin-top: 0;
    margin-right: var(--form-check-inline-input-margin-x);
    margin-left: 0;
  }
}

.form-inline {
  display: flex;
  flex-flow: row wrap;
  align-items: center; // Prevent shorter elements from growing to same height as others (e.g., small buttons growing to normal sized button height)

  // Because we use flex, the initial sizing of checkboxes is collapsed and
  // doesn't occupy the full-width (which is what we want for xs grid tier),
  // so we force that here.
  .form-check {
    width: 100%;
  }

  // Kick in the inline
  @include media-breakpoint-up(sm) {
    label {
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 0;
    }

    // Inline-block all the things for "inline"
    .formGroup {
      display: flex;
      flex: 0 0 auto;
      flex-flow: row wrap;
      align-items: center;
      margin-bottom: 0;
    }

    // Allow folks to *not* use `.formGroup`
    .formControl {
      display: inline-block;
      width: auto; // Prevent labels from stacking above inputs in `.formGroup`
      vertical-align: middle;
    }

    // Make static controls behave like regular ones
    .formControl-plaintext {
      display: inline-block;
    }

    .input-group,
    .custom-select {
      width: auto;
    }

    // Remove default margin on radios/checkboxes that were used for stacking, and
    // then undo the floating of radios and checkboxes to match.
    .form-check {
      display: flex;
      align-items: center;
      justify-content: center;
      width: auto;
      padding-left: 0;
    }
    .form-check-input {
      position: relative;
      flex-shrink: 0;
      margin-top: 0;
      margin-right: var(--form-check-input-margin-x);
      margin-left: 0;
    }

    .custom-control {
      align-items: center;
      justify-content: center;
    }
    .custom-control-label {
      margin-bottom: 0;
    }
  }
}
