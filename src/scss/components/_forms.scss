// stylelint-disable selector-no-qualifying-type

//
// Textual form controls
//

.formControl {
 display: block;
 width: 100%;
 max-width: var(--input-width);
 height: var(--input-height);
 padding: var(--input-padding-y) var(--input-padding-x);
 font-family: var(--input-font-family);
 @include font-size(var(--input-font-size));
 font-weight: var(--input-font-weight);
 line-height: var(--input-line-height);
 color: var(--input-color);
 background-color: var(--input-bg);
 background-clip: padding-box;
 border: var(--input-border-width) solid var(--input-border-color);
 border-radius: var(--input-border-radius);
 box-shadow: var(--input-box-shadow);
 transition: var(--input-transition);

 // Remove select outline from select box in FF
 &:-moz-focusring {
  color: transparent;
  text-shadow: 0 0 0 var(--input-color);
 }

 // Customize the `:focus` state to imitate native WebKit styles.
 @include formControl-focus;

 // Placeholder
 &::placeholder {
  color: var(--input-placeholder-color);
  // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526.
  opacity: 1;
 }

 // Disabled and read-only inputs
 &:disabled,
 &[readonly] {
  background-color: var(--input-disabled-bg);
  // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655.
  opacity: 1;
 }

 &--curved {
  border-radius: var(--input-border-radius-sm);
 }

 &--rounded {
  border-radius: var(--input-border-radius-lg);
 }

 &--textOnly {
  border-radius: var(--input-border-radius);
  border-width: 0 0 1px 0;
 }
 &--bg {
  border-color: transparent;
  background-color: var(--gray-light);
 }
}
label {
 display: inline-block;
 margin-bottom: 0.5rem;
 font-weight: var(--font-weight-bold);
 font-size: var(--font-size-base);
 line-height: 1;
}

input[type='date'],
input[type='time'],
input[type='datetime-local'],
input[type='month'] {
 &.formControl {
  appearance: none; // Fix appearance for date inputs in Safari
 }
}

select.formControl {
 &:focus::-ms-value {
  // Suppress the nested default white text on blue background highlight given to
  // the selected option text when the (still closed) <select> receives focus
  // in IE and (under certain conditions) Edge, as it looks bad and cannot be made to
  // match the appearance of the native widget.
  // See https://github.com/twbs/bootstrap/issues/19398.
  color: var(--input-color);
  background-color: var(--input-bg);
 }
}

// Make file inputs better match text inputs by forcing them to new lines.
.formControl-file,
.formControl-range {
 display: block;
 width: 100%;
}

//
// Labels
//

// For use with horizontal and inline forms, when you need the label (or legend)
// text to align with the form controls.
.col-form-label {
 padding-top: add(var(--input-padding-y), var(--input-border-width));
 padding-bottom: add(var(--input-padding-y), var(--input-border-width));
 margin-bottom: 0; // Override the `<label>/<legend>` default
 @include font-size(inherit); // Override the `<legend>` default
 line-height: var(--input-line-height);
}

.col-form-label-lg {
 padding-top: add(var(--input-padding-y) -lg, var(--input-border-width));
 padding-bottom: add(var(--input-padding-y) -lg, var(--input-border-width));
 @include font-size(var(--input-font-size-lg));
 line-height: var(--input-line-height-lg);
}

.col-form-label-sm {
 padding-top: add(var(--input-padding-y) -sm, var(--input-border-width));
 padding-bottom: add(var(--input-padding-y) -sm, var(--input-border-width));
 @include font-size(var(--input-font-size-sm));
 line-height: var(--input-line-height-sm);
}

// Readonly controls as plain text
//
// Apply class to a readonly input to make it appear like regular plain
// text (without any border, background color, focus indicator)

.formControl-plaintext {
 display: block;
 width: 100%;
 padding: var(--input-padding-y) 0;
 margin-bottom: 0; // match inputs if this class comes on inputs with default margins
 @include font-size(var(--input-font-size));
 line-height: var(--input-line-height);
 color: var(--input-plaintext-color);
 background-color: transparent;
 border: solid transparent;
 border-width: var(--input-border-width) 0;

 &.formControl-sm,
 &.formControl-lg {
  padding-right: 0;
  padding-left: 0;
 }
}

// Form control sizing
//
// Build on `.formControl` with modifier classes to decrease or increase the
// height and font-size of form controls.
//
// Repeated in `_input_group.scss` to avoid Sass extend issues.

.formControl-sm {
 height: var(--input-height-sm);
 padding: var(--input-padding-y-sm) var(--input-padding-x-sm);
 @include font-size(var(--input-font-size-sm));
 line-height: var(--input-line-height-sm);
 @include border-radius(var(--input-border-radius-sm));
}

.formControl-lg {
 height: var(--input-height-lg);
 padding: var(--input-padding-y-lg) var(--input-padding-x-lg);
 @include font-size(var(--input-font-size-lg));
 line-height: var(--input-line-height-lg);
 @include border-radius(var(--input-border-radius-lg));
}

// stylelint-disable-next-line no-duplicate-selectors
select.formControl {
 &[size],
 &[multiple] {
  height: auto;
 }
}

textarea.formControl {
 height: auto;
}

// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.

.formGroup {
 margin-bottom: var(--formGroup-margin-bottom);
}

.form-text {
 display: block;
 margin-top: var(--form-text-margin-top);
}

// Form grid
//
// Special replacement for our grid system's `.row` for tighter form layouts.

.form-row {
 display: flex;
 flex-wrap: wrap;
 margin-right: -calc(var(--form-grid-gutter-width) / 2);
 margin-left: -calc(var(--form-grid-gutter-width) / 2);

 > .col,
 > [class*='col-'] {
  padding-right: calc(var(--form-grid-gutter-width) / 2);
  padding-left: calc(var(--form-grid-gutter-width) / 2);
 }
}

// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.

.form-check {
 position: relative;
 display: block;
 padding-left: var(--form-check-input-gutter);
}

.form-check-input {
 position: absolute;
 margin-top: var(--form-check-input-margin-y);
 margin-left: -var(--form-check-input-gutter);

 // Use [disabled] and :disabled for workaround https://github.com/twbs/bootstrap/issues/28247
 &[disabled] ~ .form-check-label,
 &:disabled ~ .form-check-label {
  color: var(--text-muted);
 }
}

.form-check-label {
 margin-bottom: 0; // Override default `<label>` bottom margin
}

.form-check-inline {
 display: inline-flex;
 align-items: center;
 padding-left: 0; // Override base .form-check
 margin-right: var(--form-check-inline-margin-x);

 // Undo .form-check-input defaults and add some `margin-right`.
 .form-check-input {
  position: static;
  margin-top: 0;
  margin-right: var(--form-check-inline-input-margin-x);
  margin-left: 0;
 }
}

// Inline forms
//
// Make forms appear inline(-block) by adding the `.form-inline` class. Inline
// forms begin stacked on extra small (mobile) devices and then go inline when
// viewports reach <768px.
//
// Requires wrapping inputs and labels with `.formGroup` for proper display of
// default HTML form controls and our custom form controls (e.g., input groups).

.form-inline {
 display: flex;
 flex-flow: row wrap;
 align-items: center; // Prevent shorter elements from growing to same height as others (e.g., small buttons growing to normal sized button height)

 // Because we use flex, the initial sizing of checkboxes is collapsed and
 // doesn't occupy the full-width (which is what we want for xs grid tier),
 // so we force that here.
 .form-check {
  width: 100%;
 }

 // Kick in the inline
 @include media-breakpoint-up(sm) {
  label {
   display: flex;
   align-items: center;
   justify-content: center;
   margin-bottom: 0;
  }

  // Inline-block all the things for "inline"
  .formGroup {
   display: flex;
   flex: 0 0 auto;
   flex-flow: row wrap;
   align-items: center;
   margin-bottom: 0;
  }

  // Allow folks to *not* use `.formGroup`
  .formControl {
   display: inline-block;
   width: auto; // Prevent labels from stacking above inputs in `.formGroup`
   vertical-align: middle;
  }

  // Make static controls behave like regular ones
  .formControl-plaintext {
   display: inline-block;
  }

  .input-group,
  .custom-select {
   width: auto;
  }

  // Remove default margin on radios/checkboxes that were used for stacking, and
  // then undo the floating of radios and checkboxes to match.
  .form-check {
   display: flex;
   align-items: center;
   justify-content: center;
   width: auto;
   padding-left: 0;
  }
  .form-check-input {
   position: relative;
   flex-shrink: 0;
   margin-top: 0;
   margin-right: var(--form-check-input-margin-x);
   margin-left: 0;
  }

  .custom-control {
   align-items: center;
   justify-content: center;
  }
  .custom-control-label {
   margin-bottom: 0;
  }
 }
}
